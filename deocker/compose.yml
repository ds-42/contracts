networks:
  default:
    name: network
     
services:
  contracts_db:
    container_name: ${contracts_name}_db
    image: ${mssql_image}
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "0bd7903b-f568-4894-8d72-3c1b507e5644"
    ports:
      - "1433:1433"
    # healthcheck:
    #   test: ["CMD-SHELL", "pg_isready -U ${db_user} -d ${users_db_name}"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5

  # redis:
  #   container_name: redis
  #   image: ${redis_image}
  #   ports:
  #     - "26379:6379"
    
  # migrator:
  #   container_name: users_db_migrator
  #   command: dotnet ef database update --context ApplicationDbContext --connection "${users_db_connection_string}"
  #   build:
  #     context: ./
  #     dockerfile: ./UM.Api/Dockerfile 
  #     args:
  #       - dotnet_image_sdk=${dotnet_image_sdk}
  #   depends_on:
  #     users_db:
  #       condition: service_healthy

  # rabbitmq:
  #   profiles: [dev, staging]
  #   container_name: ${container_prefix}_kafka
  #   image: ${kafka_image}
  #   ports:
  #     - "9092:9092"
  #   environment:
  #     KAFKA_ZOOKEEPER_CONNECT: ${container_prefix}_zookeeper:2181
  #     KAFKA_LISTENERS: LISTENER_INTERNAL://${container_prefix}_kafka:29092,LISTENER_EXT://${container_prefix}_kafka:9092
  #     KAFKA_ADVERTISED_LISTENERS: LISTENER_INTERNAL://${container_prefix}_kafka:29092,LISTENER_EXT://localhost:9092
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_INTERNAL:PLAINTEXT,LISTENER_EXT:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_INTERNAL
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #   networks:
  #     - cmis_network
  #   depends_on:
  #     - zookeeper

  # nginx:
  #   container_name: ${container_prefix}_nginx
  #   profiles: [staging]
  #   image: ${nginx_image}
  #   ports:
  #     - "8085:8085"
  #   volumes:
  #     - ./nginx:/etc/nginx/templates/
  #   environment:
  #     container_prefix: ${container_prefix}
  #   depends_on:
  #     - registry_desk
  #     - web
  #   networks:
  #     - cmis_network

  # contracts_api:
  #   container_name: ${contracts_name}_api
  #   build:
  #     context: ../contracts/
  #     dockerfile: ./Contracts.Api/Dockerfile
  #     args:
  #       - dotnet_image_aspnet=${dotnet_image_aspnet}
  #       - dotnet_image_sdk=${dotnet_image_sdk}
  #   environment:
  #     - ASPNETCORE_ENVIRONMENT=Production
  #     - ConnectionStrings__DefaultConnection=${db_connection_string}
  #     - AllowedHosts=*
  #     - Jwt__Key=sdversdfregsgdsgfsdfwesdfsdfsdfsf
  #     - Jwt__Issuer=GardenCommunity
  #     - Jwt__Audience=GardenCommunity
  #   depends_on:
  #     contracts_db:
  #       condition: service_healthy
